import asyncio
import sys
import os
from datetime import datetime, timezone, timedelta

sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import aiosqlite
import db

# –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—à–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–¥–Ω–∏)
DAYS_THRESHOLD = 7


async def cleanup_old_data():
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
    1. –£–¥–∞–ª—è–µ—Ç —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—à–µ DAYS_THRESHOLD –¥–Ω–µ–π
    2. –£–¥–∞–ª—è–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –±–µ–∑ —Ç–æ—á–µ–∫
    3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    
    cutoff_date = datetime.now(timezone.utc) - timedelta(days=DAYS_THRESHOLD)
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {cutoff_date.strftime('%Y-%m-%d %H:%M')} UTC")
    print("=" * 60)
    
    async with aiosqlite.connect(db.DB_PATH) as conn:
        await db._ensure_schema(conn)
        await db._ensure_driver_schema(conn)
        
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏
        async with conn.execute("SELECT COUNT(*) FROM points") as cur:
            total_points = (await cur.fetchone())[0]
        
        async with conn.execute("SELECT COUNT(*) FROM drivers") as cur:
            total_drivers = (await cur.fetchone())[0]
        
        print(f"üìä –î–æ –æ—á–∏—Å—Ç–∫–∏:")
        print(f"   –¢–æ—á–µ–∫: {total_points}")
        print(f"   –í–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}")
        print()
        
        # 2. –ù–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        query_old = """
            SELECT DISTINCT user_id, MAX(ts) as last_ts
            FROM points
            GROUP BY user_id
            HAVING MAX(ts) < ?
        """
        async with conn.execute(query_old, (cutoff_date.isoformat(),)) as cur:
            old_drivers = await cur.fetchall()
        
        if old_drivers:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(old_drivers)} –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
            for user_id, last_ts in old_drivers:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
                async with conn.execute(
                    "SELECT phone FROM drivers WHERE user_id = ?", (user_id,)
                ) as cur:
                    phone_row = await cur.fetchone()
                    phone = phone_row[0] if phone_row else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                
                print(f"   ‚Ä¢ ID {user_id} (üìû {phone}), –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: {last_ts}")
        else:
            print("‚úÖ –°—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        print()
        response = input("‚ö†Ô∏è  –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∏—Ö —Ç–æ—á–∫–∏? (yes/no): ")
        
        if response.lower() != "yes":
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # 3. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–æ—á–µ–∫
        await conn.execute(
            "DELETE FROM points WHERE ts < ?",
            (cutoff_date.isoformat(),)
        )
        deleted_points = conn.total_changes
        
        # 4. –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –±–µ–∑ —Ç–æ—á–µ–∫
        await conn.execute("""
            DELETE FROM drivers
            WHERE user_id NOT IN (SELECT DISTINCT user_id FROM points)
        """)
        deleted_drivers = conn.total_changes
        
        await conn.commit()
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï
        async with conn.execute("SELECT COUNT(*) FROM points") as cur:
            remaining_points = (await cur.fetchone())[0]
        
        async with conn.execute("SELECT COUNT(*) FROM drivers") as cur:
            remaining_drivers = (await cur.fetchone())[0]
        
        print()
        print("=" * 60)
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –£–¥–∞–ª–µ–Ω–æ —Ç–æ—á–µ–∫: {deleted_points}")
        print(f"   –£–¥–∞–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {deleted_drivers}")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ—á–µ–∫: {remaining_points}")
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–π: {remaining_drivers}")


async def list_all_drivers():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏"""
    print("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:")
    print("=" * 60)
    
    async with aiosqlite.connect(db.DB_PATH) as conn:
        await db._ensure_schema(conn)
        await db._ensure_driver_schema(conn)
        
        query = """
            SELECT 
                d.user_id,
                d.phone,
                d.active,
                MAX(p.ts) as last_point_ts
            FROM drivers d
            LEFT JOIN points p ON d.user_id = p.user_id
            GROUP BY d.user_id
            ORDER BY last_point_ts DESC NULLS LAST
        """
        
        async with conn.execute(query) as cur:
            rows = await cur.fetchall()
        
        if not rows:
            print("–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ë–î")
            return
        
        for user_id, phone, active, last_ts in rows:
            status = "üü¢ –∞–∫—Ç–∏–≤–µ–Ω" if active else "üî¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
            phone_str = phone or "–Ω–µ—Ç –Ω–æ–º–µ—Ä–∞"
            last_str = last_ts or "–Ω–µ—Ç —Ç–æ—á–µ–∫"
            
            print(f"ID {user_id:10} | üìû {phone_str:15} | {status:12} | –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞: {last_str}")


if __name__ == "__main__":
    print("ü§ñ –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö GdeGruz Bot")
    print()
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")
    print("2. –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print()
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        asyncio.run(list_all_drivers())
    elif choice == "2":
        asyncio.run(cleanup_old_data())
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")