

"""
Handler for the ‚Äú–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ‚Äù button.

‚Ä¢ –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, —á—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.
‚Ä¢ –®–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
"""

from aiogram import Router, F, types

from bot.keyboards import help_kb  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ü–æ–º–æ—â—å¬ª
from db import get_phone, set_active

import os
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))

router = Router(name=__name__)


@router.message(F.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
async def stop_tracking(message: types.Message):
    """
    Driver pressed ‚Äú–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ‚Äù.
    1) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—é;
    2) —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞);
    3) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´–ü–æ–º–æ—â—å¬ª (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ /help).
    """
    # 1. –û—Ç–≤–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—é
    await message.answer(
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n"
        "–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å ‚Äî —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º¬ª.",
        reply_markup=help_kb(),
    )
    
    # –ø–æ–º–µ—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    await set_active(message.from_user.id, False)

    # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π
    if GROUP_CHAT_ID:
        phone = await get_phone(message.from_user.id)
        caption = (
            f"üö´ –í–æ–¥–∏—Ç–µ–ª—å üìû {phone} –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
            if phone
            else f"üö´ –í–æ–¥–∏—Ç–µ–ª—å {message.from_user.id} –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
        )
        try:
            await message.bot.send_message(GROUP_CHAT_ID, caption)
        except Exception as exc:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            import logging
            logging.getLogger(__name__).warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≥—Ä—É–ø–ø—É: %s", exc)